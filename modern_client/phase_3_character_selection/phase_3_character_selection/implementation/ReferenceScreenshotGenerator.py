#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
–°–æ–∑–¥–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
"""

import os
import sys
import json
import cv2
import numpy as np
from pathlib import Path
from datetime import datetime

class ReferenceScreenshotGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, phase3_dir: str):
        self.phase3_dir = Path(phase3_dir)
        self.analysis_dir = self.phase3_dir / "analysis"
        self.reference_dir = self.analysis_dir / "reference_screenshots"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.reference_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_data = self.load_analysis_data()
    
    def load_analysis_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∞–ª–æ–Ω–∞"""
        analysis_file = self.analysis_dir / "character_selection_analysis.json"
        if analysis_file.exists():
            with open(analysis_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def generate_empty_character_selection_screenshot(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—É—Å—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        print("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—É—Å—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...")
        
        # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–Ω–∞–ª–∏–∑—É
        width = 1024
        height = 768
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        screenshot = np.zeros((height, width, 3), dtype=np.uint8)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
        screenshot[:] = [30, 30, 46]  # #1e1e2e
        
        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        panel_x, panel_y = 50, 134
        panel_w, panel_h = 400, 500
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (30, 30, 46), -1)
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (255, 215, 0), 2)  # –ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            {"text": "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (50, 650), "size": (150, 40), "color": (0, 255, 0)},
            {"text": "–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (250, 650), "size": (150, 40), "color": (255, 0, 0)},
            {"text": "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É", "pos": (450, 650), "size": (150, 40), "color": (255, 215, 0)},
            {"text": "–ù–∞–∑–∞–¥", "pos": (50, 50), "size": (100, 30), "color": (255, 255, 255)}
        ]
        
        for button in buttons:
            x, y = button["pos"]
            w, h = button["size"]
            color = button["color"]
            
            # –§–æ–Ω –∫–Ω–æ–ø–∫–∏
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), (45, 45, 45), -1)
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), color, 1)
            
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
            text_size = cv2.getTextSize(button["text"], cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)[0]
            text_x = x + (w - text_size[0]) // 2
            text_y = y + (h + text_size[1]) // 2
            cv2.putText(screenshot, button["text"], (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        cv2.putText(screenshot, "–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 215, 0), 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = self.reference_dir / "reference_character_selection_empty.png"
        cv2.imwrite(str(screenshot_path), screenshot)
        
        print(f"  ‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—É—Å—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
        return screenshot_path
    
    def generate_character_selection_with_characters_screenshot(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"""
        print("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏...")
        
        # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        width = 1024
        height = 768
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        screenshot = np.zeros((height, width, 3), dtype=np.uint8)
        screenshot[:] = [30, 30, 46]  # #1e1e2e
        
        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        panel_x, panel_y = 50, 134
        panel_w, panel_h = 400, 500
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (30, 30, 46), -1)
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (255, 215, 0), 2)
        
        # –°–ª–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        characters = [
            {"name": "–¢–µ—Å—Ç–æ–≤—ã–π–í–æ–∏–Ω", "level": 25, "class": "–í–æ–∏–Ω", "location": "–ì–∏—Ä–∞–Ω"},
            {"name": "–¢–µ—Å—Ç–æ–≤—ã–π–ú–∞–≥", "level": 18, "class": "–ú–∞–≥", "location": "–ê–¥–µ–Ω"},
            {"name": "–¢–µ—Å—Ç–æ–≤—ã–π–õ—É—á–Ω–∏–∫", "level": 22, "class": "–õ—É—á–Ω–∏–∫", "location": "–ì–∏—Ä–∞–Ω"}
        ]
        
        slot_height = 80
        slot_spacing = 5
        start_y = panel_y + 10
        
        for i, char in enumerate(characters):
            slot_y = start_y + i * (slot_height + slot_spacing)
            slot_x = panel_x + 10
            slot_w = panel_w - 20
            
            # –§–æ–Ω —Å–ª–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            cv2.rectangle(screenshot, (slot_x, slot_y), (slot_x + slot_w, slot_y + slot_height), (45, 45, 45), -1)
            cv2.rectangle(screenshot, (slot_x, slot_y), (slot_x + slot_w, slot_y + slot_height), (255, 215, 0), 1)
            
            # –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            avatar_x = slot_x + 10
            avatar_y = slot_y + 10
            avatar_size = 60
            cv2.rectangle(screenshot, (avatar_x, avatar_y), (avatar_x + avatar_size, avatar_y + avatar_size), (0, 0, 0), -1)
            cv2.rectangle(screenshot, (avatar_x, avatar_y), (avatar_x + avatar_size, avatar_y + avatar_size), (255, 255, 255), 1)
            
            # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            name_x = avatar_x + avatar_size + 10
            name_y = slot_y + 20
            cv2.putText(screenshot, char["name"], (name_x, name_y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
            
            # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            level_text = f"–£—Ä–æ–≤–µ–Ω—å {char['level']}"
            level_y = name_y + 20
            cv2.putText(screenshot, level_text, (name_x, level_y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 215, 0), 1)
            
            # –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            class_y = level_y + 15
            cv2.putText(screenshot, char["class"], (name_x, class_y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (192, 192, 192), 1)
            
            # –õ–æ–∫–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            location_x = slot_x + slot_w - 100
            location_y = slot_y + 20
            cv2.putText(screenshot, char["location"], (location_x, location_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (128, 128, 128), 1)
        
        # –ö–Ω–æ–ø–∫–∏ (–∫–∞–∫ –≤ –ø—É—Å—Ç–æ–º —ç–∫—Ä–∞–Ω–µ)
        buttons = [
            {"text": "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (50, 650), "size": (150, 40), "color": (0, 255, 0)},
            {"text": "–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (250, 650), "size": (150, 40), "color": (255, 0, 0)},
            {"text": "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É", "pos": (450, 650), "size": (150, 40), "color": (255, 215, 0)},
            {"text": "–ù–∞–∑–∞–¥", "pos": (50, 50), "size": (100, 30), "color": (255, 255, 255)}
        ]
        
        for button in buttons:
            x, y = button["pos"]
            w, h = button["size"]
            color = button["color"]
            
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), (45, 45, 45), -1)
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), color, 1)
            
            text_size = cv2.getTextSize(button["text"], cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)[0]
            text_x = x + (w - text_size[0]) // 2
            text_y = y + (h + text_size[1]) // 2
            cv2.putText(screenshot, button["text"], (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        cv2.putText(screenshot, "–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 215, 0), 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = self.reference_dir / "reference_character_selection_with_characters.png"
        cv2.imwrite(str(screenshot_path), screenshot)
        
        print(f"  ‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
        return screenshot_path
    
    def generate_max_characters_screenshot(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        print("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        
        # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        width = 1024
        height = 768
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        screenshot = np.zeros((height, width, 3), dtype=np.uint8)
        screenshot[:] = [30, 30, 46]  # #1e1e2e
        
        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        panel_x, panel_y = 50, 134
        panel_w, panel_h = 400, 500
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (30, 30, 46), -1)
        cv2.rectangle(screenshot, (panel_x, panel_y), (panel_x + panel_w, panel_y + panel_h), (255, 215, 0), 2)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (7)
        characters = [
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂1", "level": 25, "class": "–í–æ–∏–Ω", "location": "–ì–∏—Ä–∞–Ω"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂2", "level": 18, "class": "–ú–∞–≥", "location": "–ê–¥–µ–Ω"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂3", "level": 22, "class": "–õ—É—á–Ω–∏–∫", "location": "–ì–∏—Ä–∞–Ω"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂4", "level": 20, "class": "–ñ—Ä–µ—Ü", "location": "–ê–¥–µ–Ω"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂5", "level": 30, "class": "–†—ã—Ü–∞—Ä—å", "location": "–ì–ª–æ–¥–∏–æ"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂6", "level": 15, "class": "–ê—Å—Å–∞—Å–∏–Ω", "location": "–î–∏–æ–Ω"},
            {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂7", "level": 28, "class": "–î—Ä—É–∏–¥", "location": "–û—Ä–µ–Ω"}
        ]
        
        slot_height = 60  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        slot_spacing = 3
        start_y = panel_y + 10
        
        for i, char in enumerate(characters):
            slot_y = start_y + i * (slot_height + slot_spacing)
            slot_x = panel_x + 10
            slot_w = panel_w - 20
            
            # –§–æ–Ω —Å–ª–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            cv2.rectangle(screenshot, (slot_x, slot_y), (slot_x + slot_w, slot_y + slot_height), (45, 45, 45), -1)
            cv2.rectangle(screenshot, (slot_x, slot_y), (slot_x + slot_w, slot_y + slot_height), (255, 215, 0), 1)
            
            # –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            avatar_x = slot_x + 5
            avatar_y = slot_y + 5
            avatar_size = 50
            cv2.rectangle(screenshot, (avatar_x, avatar_y), (avatar_x + avatar_size, avatar_y + avatar_size), (0, 0, 0), -1)
            cv2.rectangle(screenshot, (avatar_x, avatar_y), (avatar_x + avatar_size, avatar_y + avatar_size), (255, 255, 255), 1)
            
            # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            name_x = avatar_x + avatar_size + 5
            name_y = slot_y + 15
            cv2.putText(screenshot, char["name"], (name_x, name_y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)
            
            # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            level_text = f"–£—Ä. {char['level']}"
            level_y = name_y + 12
            cv2.putText(screenshot, level_text, (name_x, level_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (255, 215, 0), 1)
            
            # –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            class_y = level_y + 10
            cv2.putText(screenshot, char["class"], (name_x, class_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (192, 192, 192), 1)
            
            # –õ–æ–∫–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            location_x = slot_x + slot_w - 80
            location_y = slot_y + 15
            cv2.putText(screenshot, char["location"], (location_x, location_y), cv2.FONT_HERSHEY_SIMPLEX, 0.25, (128, 128, 128), 1)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            {"text": "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (50, 650), "size": (150, 40), "color": (0, 255, 0)},
            {"text": "–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "pos": (250, 650), "size": (150, 40), "color": (255, 0, 0)},
            {"text": "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É", "pos": (450, 650), "size": (150, 40), "color": (255, 215, 0)},
            {"text": "–ù–∞–∑–∞–¥", "pos": (50, 50), "size": (100, 30), "color": (255, 255, 255)}
        ]
        
        for button in buttons:
            x, y = button["pos"]
            w, h = button["size"]
            color = button["color"]
            
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), (45, 45, 45), -1)
            cv2.rectangle(screenshot, (x, y), (x + w, y + h), color, 1)
            
            text_size = cv2.getTextSize(button["text"], cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)[0]
            text_x = x + (w - text_size[0]) // 2
            text_y = y + (h + text_size[1]) // 2
            cv2.putText(screenshot, button["text"], (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        cv2.putText(screenshot, "–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 215, 0), 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = self.reference_dir / "reference_character_selection_max_characters.png"
        cv2.imwrite(str(screenshot_path), screenshot)
        
        print(f"  ‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
        return screenshot_path
    
    def generate_all_reference_screenshots(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
        print("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("=" * 70)
        
        start_time = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        empty_screenshot = self.generate_empty_character_selection_screenshot()
        with_characters_screenshot = self.generate_character_selection_with_characters_screenshot()
        max_characters_screenshot = self.generate_max_characters_screenshot()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            "generation_timestamp": datetime.now().isoformat(),
            "generation_duration": (datetime.now() - start_time).total_seconds(),
            "generated_screenshots": [
                {
                    "name": "empty_character_selection",
                    "path": str(empty_screenshot),
                    "description": "–ü—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
                },
                {
                    "name": "character_selection_with_characters",
                    "path": str(with_characters_screenshot),
                    "description": "–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"
                },
                {
                    "name": "max_characters_selection",
                    "path": str(max_characters_screenshot),
                    "description": "–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
                }
            ],
            "screenshot_specifications": {
                "resolution": "1024x768",
                "background_color": "#1e1e2e",
                "panel_color": "#1e1e2e",
                "panel_border_color": "#FFD700",
                "character_slot_color": "#2d2d2d",
                "character_slot_border_color": "#FFD700",
                "button_colors": {
                    "create": "#00FF00",
                    "delete": "#FF0000",
                    "enter": "#FFD700",
                    "back": "#FFFFFF"
                }
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.reference_dir / "reference_screenshots_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –≠–¢–ê–õ–û–ù–ù–´–• –°–ö–†–ò–ù–®–û–¢–û–í:")
        print("-" * 50)
        print(f"–°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(report['generated_screenshots'])}")
        print(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {report['generation_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        print(f"\n‚úÖ –í—Å–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.reference_dir}")
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    phase3_dir = "/home/ni/Projects/la2bots/modern_client/phase_3_character_selection/phase_3_character_selection"
    generator = ReferenceScreenshotGenerator(phase3_dir)
    generator.generate_all_reference_screenshots()

if __name__ == "__main__":
    main()
