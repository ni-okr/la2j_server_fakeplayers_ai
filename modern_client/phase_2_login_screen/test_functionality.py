#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
"""

import os
import sys
import json
import time
from pathlib import Path
from datetime import datetime

class FunctionalityTester:
    """–¢–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞"""
    
    def __init__(self, phase2_dir: str):
        self.phase2_dir = Path(phase2_dir)
        self.implementation_dir = self.phase2_dir / "implementation"
        self.tests_dir = self.phase2_dir / "tests"
        self.results_dir = self.phase2_dir / "results"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_dir.mkdir(exist_ok=True)
    
    def test_validation_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        validation_tests = {
            "valid_login": {
                "input": "testuser",
                "expected": True,
                "description": "–í–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω"
            },
            "short_login": {
                "input": "ab",
                "expected": False,
                "description": "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥–∏–Ω"
            },
            "long_login": {
                "input": "verylongusernamethatexceedslimit",
                "expected": False,
                "description": "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ª–æ–≥–∏–Ω"
            },
            "invalid_chars_login": {
                "input": "user@name",
                "expected": False,
                "description": "–õ–æ–≥–∏–Ω —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"
            },
            "valid_password": {
                "input": "test123",
                "expected": True,
                "description": "–í–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            },
            "short_password": {
                "input": "123",
                "expected": False,
                "description": "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å"
            },
            "password_no_letters": {
                "input": "123456",
                "expected": False,
                "description": "–ü–∞—Ä–æ–ª—å –±–µ–∑ –±—É–∫–≤"
            },
            "password_no_digits": {
                "input": "password",
                "expected": False,
                "description": "–ü–∞—Ä–æ–ª—å –±–µ–∑ —Ü–∏—Ñ—Ä"
            }
        }
        
        results = {}
        for test_name, test_data in validation_tests.items():
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if "login" in test_name:
                result = self.simulate_login_validation(test_data["input"])
            else:
                result = self.simulate_password_validation(test_data["input"])
            
            results[test_name] = {
                "input": test_data["input"],
                "expected": test_data["expected"],
                "actual": result,
                "passed": result == test_data["expected"],
                "description": test_data["description"]
            }
            
            status = "‚úÖ" if result == test_data["expected"] else "‚ùå"
            print(f"  {status} {test_data['description']}: {test_data['input']} -> {result}")
        
        return results
    
    def test_authentication_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        auth_tests = {
            "valid_credentials": {
                "login": "test",
                "password": "test123",
                "expected": True,
                "description": "–í–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            },
            "invalid_login": {
                "login": "wronguser",
                "password": "test123",
                "expected": False,
                "description": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω"
            },
            "invalid_password": {
                "login": "test",
                "password": "wrongpass",
                "expected": False,
                "description": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            },
            "empty_credentials": {
                "login": "",
                "password": "",
                "expected": False,
                "description": "–ü—É—Å—Ç—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            }
        }
        
        results = {}
        for test_name, test_data in auth_tests.items():
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            result = self.simulate_authentication(test_data["login"], test_data["password"])
            
            results[test_name] = {
                "login": test_data["login"],
                "password": test_data["password"],
                "expected": test_data["expected"],
                "actual": result,
                "passed": result == test_data["expected"],
                "description": test_data["description"]
            }
            
            status = "‚úÖ" if result == test_data["expected"] else "‚ùå"
            print(f"  {status} {test_data['description']}: {test_data['login']}/{test_data['password']} -> {result}")
        
        return results
    
    def test_screen_transitions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏...")
        
        transition_tests = {
            "login_to_character_selection": {
                "from": "Login",
                "to": "CharacterSelection",
                "expected": True,
                "description": "–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≤—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            },
            "login_to_character_creation": {
                "from": "Login",
                "to": "CharacterCreation",
                "expected": True,
                "description": "–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≤—Ö–æ–¥–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            },
            "login_to_settings": {
                "from": "Login",
                "to": "Settings",
                "expected": True,
                "description": "–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≤—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            },
            "invalid_transition": {
                "from": "Login",
                "to": "InvalidScreen",
                "expected": False,
                "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥"
            }
        }
        
        results = {}
        for test_name, test_data in transition_tests.items():
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            result = self.simulate_screen_transition(test_data["from"], test_data["to"])
            
            results[test_name] = {
                "from": test_data["from"],
                "to": test_data["to"],
                "expected": test_data["expected"],
                "actual": result,
                "passed": result == test_data["expected"],
                "description": test_data["description"]
            }
            
            status = "‚úÖ" if result == test_data["expected"] else "‚ùå"
            print(f"  {status} {test_data['description']}: {test_data['from']} -> {test_data['to']}")
        
        return results
    
    def test_real_time_validation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        realtime_tests = {
            "login_field_typing": {
                "field": "LoginField",
                "input_sequence": ["t", "e", "s", "t", "u", "s", "e", "r"],
                "expected_states": [False, False, False, True, True, True, True, True],
                "description": "–í–≤–æ–¥ –≤ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞"
            },
            "password_field_typing": {
                "field": "PasswordField",
                "input_sequence": ["t", "e", "s", "t", "1", "2", "3"],
                "expected_states": [False, False, False, False, False, True, True],
                "description": "–í–≤–æ–¥ –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è"
            },
            "field_clearing": {
                "field": "LoginField",
                "input_sequence": ["t", "e", "s", "t", "", "", ""],
                "expected_states": [False, False, False, True, False, False, False],
                "description": "–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è"
            }
        }
        
        results = {}
        for test_name, test_data in realtime_tests.items():
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            result = self.simulate_realtime_validation(
                test_data["field"],
                test_data["input_sequence"],
                test_data["expected_states"]
            )
            
            results[test_name] = {
                "field": test_data["field"],
                "input_sequence": test_data["input_sequence"],
                "expected_states": test_data["expected_states"],
                "actual_states": result["actual_states"],
                "passed": result["passed"],
                "description": test_data["description"]
            }
            
            status = "‚úÖ" if result["passed"] else "‚ùå"
            print(f"  {status} {test_data['description']}: {len(test_data['input_sequence'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return results
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
        print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        error_tests = {
            "network_timeout": {
                "error_type": "NetworkTimeout",
                "expected_handling": True,
                "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Ç–∏"
            },
            "server_error": {
                "error_type": "ServerError",
                "expected_handling": True,
                "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
            },
            "validation_error": {
                "error_type": "ValidationError",
                "expected_handling": True,
                "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
            },
            "unknown_error": {
                "error_type": "UnknownError",
                "expected_handling": True,
                "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏"
            }
        }
        
        results = {}
        for test_name, test_data in error_tests.items():
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            result = self.simulate_error_handling(test_data["error_type"])
            
            results[test_name] = {
                "error_type": test_data["error_type"],
                "expected_handling": test_data["expected_handling"],
                "actual_handling": result,
                "passed": result == test_data["expected_handling"],
                "description": test_data["description"]
            }
            
            status = "‚úÖ" if result == test_data["expected_handling"] else "‚ùå"
            print(f"  {status} {test_data['description']}: {test_data['error_type']}")
        
        return results
    
    def simulate_login_validation(self, login: str) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ª–æ–≥–∏–Ω–∞"""
        if len(login) < 3 or len(login) > 16:
            return False
        
        for char in login:
            if not char.isalnum() and char != '_':
                return False
        
        forbidden_words = ['admin', 'root', 'user', 'test']
        if login.lower() in forbidden_words:
            return False
        
        return True
    
    def simulate_password_validation(self, password: str) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è"""
        if len(password) < 6 or len(password) > 16:
            return False
        
        has_letter = any(char.isalpha() for char in password)
        has_digit = any(char.isdigit() for char in password)
        
        return has_letter and has_digit
    
    def simulate_authentication(self, login: str, password: str) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if login == "test" and password == "test123":
            return True
        return False
    
    def simulate_screen_transition(self, from_screen: str, to_screen: str) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏"""
        valid_screens = ["Login", "CharacterSelection", "CharacterCreation", "Settings", "Loading"]
        return to_screen in valid_screens
    
    def simulate_realtime_validation(self, field: str, input_sequence: list, expected_states: list) -> dict:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        actual_states = []
        current_input = ""
        
        for char in input_sequence:
            current_input += char
            if field == "LoginField":
                is_valid = self.simulate_login_validation(current_input)
            else:
                is_valid = self.simulate_password_validation(current_input)
            actual_states.append(is_valid)
        
        passed = actual_states == expected_states
        return {"actual_states": actual_states, "passed": passed}
    
    def simulate_error_handling(self, error_type: str) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        return True
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞")
        print("=" * 60)
        
        start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        validation_results = self.test_validation_system()
        auth_results = self.test_authentication_system()
        transition_results = self.test_screen_transitions()
        realtime_results = self.test_real_time_validation()
        error_results = self.test_error_handling()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_results = {
            "validation": validation_results,
            "authentication": auth_results,
            "transitions": transition_results,
            "realtime": realtime_results,
            "error_handling": error_results
        }
        
        total_tests = 0
        passed_tests = 0
        
        for category, results in all_results.items():
            for test_name, result in results.items():
                total_tests += 1
                if result["passed"]:
                    passed_tests += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        overall_score = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            "test_timestamp": datetime.now().isoformat(),
            "test_duration": (datetime.now() - start_time).total_seconds(),
            "overall_results": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": total_tests - passed_tests,
                "success_rate": overall_score
            },
            "detailed_results": all_results,
            "functionality_status": {
                "validation_system": all(result["passed"] for result in validation_results.values()),
                "authentication_system": all(result["passed"] for result in auth_results.values()),
                "screen_transitions": all(result["passed"] for result in transition_results.values()),
                "realtime_validation": all(result["passed"] for result in realtime_results.values()),
                "error_handling": all(result["passed"] for result in error_results.values())
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.results_dir / f"functionality_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:")
        print("-" * 50)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_score:.1f}%")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['test_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        meets_criteria = (
            overall_score >= 95.0 and
            report["functionality_status"]["validation_system"] and
            report["functionality_status"]["authentication_system"] and
            report["functionality_status"]["screen_transitions"] and
            report["functionality_status"]["realtime_validation"] and
            report["functionality_status"]["error_handling"]
        )
        
        print(f"\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–†–ò–¢–ï–†–ò–Ø–ú: {'‚úÖ –î–ê' if meets_criteria else '‚ùå –ù–ï–¢'}")
        
        if meets_criteria:
            print("üéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –≤—Ö–æ–¥–∞ –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    phase2_dir = "/home/ni/Projects/la2bots/modern_client/phase_2_login_screen"
    tester = FunctionalityTester(phase2_dir)
    tester.run_all_tests()

if __name__ == "__main__":
    main()
