package net.sf.l2j.botmanager.core;

/**
 * Перечисление типов ботов в системе L2J Bot Manager.
 * 
 * <p>Каждый тип бота имеет свою роль в иерархии замка и выполняет специфические функции.
 * Типы ботов организованы по иерархическому принципу, где боты с более высоким уровнем
 * иерархии могут командовать ботами с более низким уровнем.</p>
 * 
 * <p>Система типов ботов обеспечивает:</p>
 * <ul>
 *   <li>Четкое разделение ролей и обязанностей</li>
 *   <li>Иерархическую структуру командования</li>
 *   <li>Специализированное поведение для каждого типа</li>
 *   <li>Масштабируемость системы управления ботами</li>
 * </ul>
 * 
 * @author ni-okr
 * @version 2.0
 * @since 2025-09-26
 */
public enum BotType {
    
    /** Рядовой боец для защиты замка - базовая боевая единица */
    SOLDIER("Солдат", "Рядовой боец для защиты замка", 1),
    
    /** Командир группы солдат - управляет небольшими отрядами */
    OFFICER("Офицер", "Командир группы солдат", 2),
    
    /** Стратегический командир - планирует операции и координирует действия */
    HIGH_OFFICER("Высший офицер", "Стратегический командир", 3),
    
    /** Главный стратег - принимает стратегические решения */
    VICE_GUILDMASTER("Заместитель гильдии", "Главный стратег", 4),
    
    /** Бот для сбора ресурсов - занимается фармом и добычей материалов */
    FARMER("Фермер", "Бот для сбора ресурсов", 5),
    
    /** Бот для торговли - управляет экономическими операциями */
    MERCHANT("Торговец", "Бот для торговли", 6),
    
    /** Бот для охраны территории - патрулирует и защищает границы */
    GUARD("Стражник", "Бот для охраны территории", 7);

    /** Человекочитаемое название типа бота */
    private final String name;
    
    /** Подробное описание роли и функций бота */
    private final String description;
    
    /** Уровень в иерархии командования (чем выше число, тем выше ранг) */
    private final int hierarchyLevel;

    /**
     * Конструктор типа бота.
     * 
     * @param name человекочитаемое название типа
     * @param description подробное описание роли и функций
     * @param hierarchyLevel уровень в иерархии командования
     */
    BotType(String name, String description, int hierarchyLevel) {
        this.name = name;
        this.description = description;
        this.hierarchyLevel = hierarchyLevel;
    }

    /**
     * Получить человекочитаемое название типа бота.
     * 
     * @return название типа бота
     */
    public String getName() {
        return name;
    }

    /**
     * Получить подробное описание роли и функций бота.
     * 
     * @return описание типа бота
     */
    public String getDescription() {
        return description;
    }

    /**
     * Получить уровень в иерархии командования.
     * 
     * @return уровень иерархии (чем выше число, тем выше ранг)
     */
    public int getHierarchyLevel() {
        return hierarchyLevel;
    }

    /**
     * Проверить, может ли данный тип бота командовать другим типом.
     * 
     * <p>Бот может командовать другим ботом, если его уровень иерархии выше.
     * Это обеспечивает соблюдение военной дисциплины и четкую структуру командования.</p>
     * 
     * @param subordinateType тип подчиненного бота
     * @return true, если данный тип может командовать подчиненным типом
     */
    public boolean canCommand(BotType subordinateType) {
        return this.hierarchyLevel > subordinateType.hierarchyLevel;
    }
}
