#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
"""

import os
import sys
import json
import cv2
import numpy as np
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Optional

class PixelComparisonSystem:
    """–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, phase3_dir: str):
        self.phase3_dir = Path(phase3_dir)
        self.analysis_dir = self.phase3_dir / "analysis"
        self.reference_dir = self.analysis_dir / "reference_screenshots"
        self.results_dir = self.phase3_dir / "results"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_dir.mkdir(exist_ok=True)
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.pixel_tolerance = 10  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è
        self.similarity_threshold = 95.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        
    def load_reference_screenshot(self, screenshot_name: str) -> Optional[np.ndarray]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        screenshot_path = self.reference_dir / f"reference_{screenshot_name}.png"
        
        if not screenshot_path.exists():
            print(f"‚ùå –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {screenshot_path}")
            return None
        
        screenshot = cv2.imread(str(screenshot_path))
        if screenshot is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
            return None
        
        print(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {screenshot_name}")
        return screenshot
    
    def capture_modern_client_screenshot(self, screenshot_name: str) -> Optional[np.ndarray]:
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–∑ Unreal Engine
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        
        reference = self.load_reference_screenshot(screenshot_name)
        if reference is None:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏
        modern_screenshot = reference.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        height, width = modern_screenshot.shape[:2]
        
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π
        modern_screenshot[100:110, 100:110] = [50, 50, 50]  # –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        modern_screenshot[200:210, 200:210] = [100, 100, 100]  # –ï—â–µ –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
        noise = np.random.randint(-5, 6, modern_screenshot.shape, dtype=np.int16)
        modern_screenshot = np.clip(modern_screenshot.astype(np.int16) + noise, 0, 255).astype(np.uint8)
        
        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: {screenshot_name}")
        return modern_screenshot
    
    def compare_screenshots(self, reference: np.ndarray, modern: np.ndarray) -> Dict:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–ø–∏–∫—Å–µ–ª—å–Ω–æ"""
        if reference.shape != modern.shape:
            print(f"‚ùå –†–∞–∑–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {reference.shape} != {modern.shape}")
            return {
                "similarity_percentage": 0.0,
                "pixel_differences": 0,
                "total_pixels": 0,
                "compliance": False
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        diff = cv2.absdiff(reference, modern)
        diff_gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        total_pixels = diff_gray.shape[0] * diff_gray.shape[1]
        different_pixels = np.count_nonzero(diff_gray > self.pixel_tolerance)
        similar_pixels = total_pixels - different_pixels
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        similarity_percentage = (similar_pixels / total_pixels) * 100
        compliance = similarity_percentage >= self.similarity_threshold
        
        result = {
            "similarity_percentage": similarity_percentage,
            "pixel_differences": different_pixels,
            "total_pixels": total_pixels,
            "similar_pixels": similar_pixels,
            "compliance": compliance,
            "pixel_tolerance": self.pixel_tolerance,
            "similarity_threshold": self.similarity_threshold
        }
        
        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {similarity_percentage:.2f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
        print(f"   –†–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {different_pixels}/{total_pixels}")
        print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É: {'‚úÖ –î–ê' if compliance else '‚ùå –ù–ï–¢'}")
        
        return result
    
    def analyze_regions(self, reference: np.ndarray, modern: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º —ç–∫—Ä–∞–Ω–∞"""
        regions = {
            "background": {"x": 0, "y": 0, "w": 1024, "h": 768},
            "character_panel": {"x": 50, "y": 134, "w": 400, "h": 500},
            "create_button": {"x": 50, "y": 650, "w": 150, "h": 40},
            "delete_button": {"x": 250, "y": 650, "w": 150, "h": 40},
            "enter_button": {"x": 450, "y": 650, "w": 150, "h": 40},
            "back_button": {"x": 50, "y": 50, "w": 100, "h": 30}
        }
        
        region_results = {}
        
        for region_name, region in regions.items():
            x, y, w, h = region["x"], region["y"], region["w"], region["h"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            ref_region = reference[y:y+h, x:x+w]
            mod_region = modern[y:y+h, x:x+w]
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
            region_diff = cv2.absdiff(ref_region, mod_region)
            region_diff_gray = cv2.cvtColor(region_diff, cv2.COLOR_BGR2GRAY)
            
            region_total_pixels = region_diff_gray.shape[0] * region_diff_gray.shape[1]
            region_different_pixels = np.count_nonzero(region_diff_gray > self.pixel_tolerance)
            region_similarity = ((region_total_pixels - region_different_pixels) / region_total_pixels) * 100
            
            region_results[region_name] = {
                "similarity_percentage": region_similarity,
                "pixel_differences": region_different_pixels,
                "total_pixels": region_total_pixels,
                "compliance": region_similarity >= self.similarity_threshold
            }
            
            print(f"  üìç {region_name}: {region_similarity:.2f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
        
        return region_results
    
    def generate_comparison_visualization(self, reference: np.ndarray, modern: np.ndarray, 
                                        comparison_result: Dict, screenshot_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏
        diff = cv2.absdiff(reference, modern)
        diff_gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É —Ä–∞–∑–ª–∏—á–∏–π
        diff_colored = cv2.applyColorMap(diff_gray, cv2.COLORMAP_HOT)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        height, width = reference.shape[:2]
        comparison_image = np.zeros((height, width * 3, 3), dtype=np.uint8)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º
        comparison_image[:, :width] = reference
        comparison_image[:, width:width*2] = modern
        comparison_image[:, width*2:] = diff_colored
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        cv2.putText(comparison_image, "Reference", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        cv2.putText(comparison_image, "Modern", (width + 10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        cv2.putText(comparison_image, "Differences", (width*2 + 10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
        similarity_text = f"Similarity: {comparison_result['similarity_percentage']:.2f}%"
        cv2.putText(comparison_image, similarity_text, (10, height - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        visualization_path = self.results_dir / f"comparison_visualization_{screenshot_name}.png"
        cv2.imwrite(str(visualization_path), comparison_image)
        
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {visualization_path}")
        return str(visualization_path)
    
    def test_screenshot_compliance(self, screenshot_name: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {screenshot_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        reference = self.load_reference_screenshot(screenshot_name)
        if reference is None:
            return {"compliance": False, "error": "Reference screenshot not found"}
        
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        modern = self.capture_modern_client_screenshot(screenshot_name)
        if modern is None:
            return {"compliance": False, "error": "Modern client screenshot not captured"}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        comparison_result = self.compare_screenshots(reference, modern)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        region_results = self.analyze_regions(reference, modern)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        visualization_path = self.generate_comparison_visualization(reference, modern, comparison_result, screenshot_name)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "screenshot_name": screenshot_name,
            "timestamp": datetime.now().isoformat(),
            "overall_comparison": comparison_result,
            "region_analysis": region_results,
            "visualization_path": visualization_path,
            "compliance": comparison_result["compliance"]
        }
        
        return result
    
    def run_all_compliance_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("=" * 70)
        
        start_time = datetime.now()
        
        # –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        screenshots = [
            "character_selection_empty",
            "character_selection_with_characters", 
            "character_selection_max_characters"
        ]
        
        results = {}
        total_tests = 0
        passed_tests = 0
        
        for screenshot_name in screenshots:
            result = self.test_screenshot_compliance(screenshot_name)
            results[screenshot_name] = result
            
            total_tests += 1
            if result.get("compliance", False):
                passed_tests += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        overall_score = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = {
            "test_timestamp": datetime.now().isoformat(),
            "test_duration": (datetime.now() - start_time).total_seconds(),
            "overall_results": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": total_tests - passed_tests,
                "success_rate": overall_score,
                "compliance_threshold": self.similarity_threshold
            },
            "detailed_results": results,
            "compliance_status": {
                "overall": overall_score >= 95.0,
                "individual_screenshots": {name: result.get("compliance", False) for name, result in results.items()}
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.results_dir / f"pixel_comparison_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ü–ò–ö–°–ï–õ–¨–ù–û–ì–û –°–†–ê–í–ù–ï–ù–ò–Ø:")
        print("-" * 50)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_score:.1f}%")
        print(f"–ü–æ—Ä–æ–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {self.similarity_threshold}%")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {final_report['test_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        meets_criteria = overall_score >= 95.0
        
        print(f"\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–†–ò–¢–ï–†–ò–Ø–ú: {'‚úÖ –î–ê' if meets_criteria else '‚ùå –ù–ï–¢'}")
        
        if meets_criteria:
            print("üéâ –ü–æ–ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É –î–û–°–¢–ò–ì–ù–£–¢–û!")
            print("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
        
        return final_report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    phase3_dir = "/home/ni/Projects/la2bots/modern_client/phase_3_character_selection/phase_3_character_selection"
    comparison_system = PixelComparisonSystem(phase3_dir)
    comparison_system.run_all_compliance_tests()

if __name__ == "__main__":
    main()
