#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

import unittest
import json
import os
from pathlib import Path

class TestCharacterCreationScreen(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.base_path = Path(__file__).parent.parent
        self.analysis_file = self.base_path / "analysis" / "character_creation_analysis.json"
        self.implementation_dir = self.base_path / "implementation"
    
    def test_analysis_file_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.assertTrue(self.analysis_file.exists(), "–§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_analysis_file_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        with open(self.analysis_file, 'r', encoding='utf-8') as f:
            analysis = json.load(f)
        
        self.assertIn('elements', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª elements")
        self.assertIn('functionality', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª functionality")
        self.assertIn('visual_requirements', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª visual_requirements")
    
    def test_implementation_files_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        required_files = [
            "CharacterCreationScreen.h",
            "CharacterCreationScreen.cpp",
            "WBP_CharacterCreationScreen.json"
        ]
        
        for file_name in required_files:
            file_path = self.implementation_dir / file_name
            self.assertTrue(file_path.exists(), f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_character_creation_screen_h_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        header_file = self.implementation_dir / "CharacterCreationScreen.h"
        with open(header_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        self.assertIn("UCharacterCreationScreen", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å UCharacterCreationScreen")
        self.assertIn("OnCreateCharacterButtonClicked", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        self.assertIn("OnCancelButtonClicked", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã")
        self.assertIn("ValidateCharacterData", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    def test_character_creation_screen_cpp_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        cpp_file = self.implementation_dir / "CharacterCreationScreen.cpp"
        with open(cpp_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        self.assertIn("UCharacterCreationScreen::", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞")
        self.assertIn("NativeConstruct", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è NativeConstruct")
        self.assertIn("InitializeCharacterCreation", content, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    def test_blueprint_template_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ Blueprint"""
        blueprint_file = self.implementation_dir / "WBP_CharacterCreationScreen.json"
        with open(blueprint_file, 'r', encoding='utf-8') as f:
            blueprint = json.load(f)
        
        self.assertIn('components', blueprint, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª components")
        self.assertIn('create_button', blueprint['components'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        self.assertIn('cancel_button', blueprint['components'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã")
        self.assertIn('name_input_field', blueprint['components'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    print("=" * 50)
    
    unittest.main(verbosity=2)
