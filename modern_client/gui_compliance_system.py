#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è GUI –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
–í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import json
import subprocess
import cv2
import numpy as np
from pathlib import Path
from typing import Dict, List, Any, Tuple, Optional
import hashlib
import time
from datetime import datetime
import sqlite3

class GUIComplianceSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GUI"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.reference_client = self.project_root / "reference_client"
        self.modern_client = self.project_root / "modern_client"
        self.compliance_db = self.modern_client / "compliance.db"
        self.screenshots_dir = self.modern_client / "screenshots"
        self.reference_screenshots_dir = self.modern_client / "reference_screenshots"
        self.comparison_results_dir = self.modern_client / "comparison_results"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_path in [self.screenshots_dir, self.reference_screenshots_dir, self.comparison_results_dir]:
            dir_path.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.init_compliance_database()
    
    def init_compliance_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        conn = sqlite3.connect(self.compliance_db)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS gui_elements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                element_name TEXT NOT NULL,
                screen_type TEXT NOT NULL,
                position_x INTEGER,
                position_y INTEGER,
                width INTEGER,
                height INTEGER,
                reference_hash TEXT,
                modern_hash TEXT,
                compliance_score REAL,
                status TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∏–æ–º–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS biome_locations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                biome_name TEXT NOT NULL,
                location_name TEXT NOT NULL,
                coordinates_x REAL,
                coordinates_y REAL,
                coordinates_z REAL,
                reference_screenshot TEXT,
                modern_screenshot TEXT,
                visual_compliance_score REAL,
                status TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS compliance_tests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                test_name TEXT NOT NULL,
                test_type TEXT NOT NULL,
                test_description TEXT,
                expected_result TEXT,
                actual_result TEXT,
                status TEXT,
                error_message TEXT,
                execution_time REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def extract_gui_elements_from_reference(self) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç GUI —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        
        gui_elements = {
            "login_screen": {
                "background": {"pos": (0, 0), "size": (1024, 768)},
                "login_field": {"pos": (412, 300), "size": (200, 30)},
                "password_field": {"pos": (412, 340), "size": (200, 30)},
                "login_button": {"pos": (462, 380), "size": (100, 40)},
                "register_button": {"pos": (462, 430), "size": (100, 40)},
                "settings_button": {"pos": (50, 50), "size": (80, 30)},
                "logo": {"pos": (362, 100), "size": (300, 100)}
            },
            "character_selection": {
                "character_list": {"pos": (50, 100), "size": (300, 500)},
                "character_model": {"pos": (400, 100), "size": (400, 500)},
                "character_info": {"pos": (820, 100), "size": (180, 200)},
                "enter_game_button": {"pos": (820, 320), "size": (120, 40)},
                "create_character_button": {"pos": (820, 370), "size": (120, 40)},
                "delete_character_button": {"pos": (820, 420), "size": (120, 40)}
            },
            "character_creation": {
                "race_selection": {"pos": (50, 100), "size": (200, 300)},
                "gender_selection": {"pos": (50, 420), "size": (200, 100)},
                "class_selection": {"pos": (50, 540), "size": (200, 150)},
                "appearance_settings": {"pos": (270, 100), "size": (200, 590)},
                "character_preview": {"pos": (490, 100), "size": (400, 500)},
                "name_input": {"pos": (490, 620), "size": (200, 30)},
                "create_button": {"pos": (910, 620), "size": (80, 40)},
                "cancel_button": {"pos": (910, 670), "size": (80, 40)}
            },
            "game_interface": {
                "hp_bar": {"pos": (20, 20), "size": (200, 20)},
                "mp_bar": {"pos": (20, 45), "size": (200, 20)},
                "exp_bar": {"pos": (20, 70), "size": (200, 20)},
                "skills_panel": {"pos": (312, 708), "size": (400, 60)},
                "inventory_button": {"pos": (924, 708), "size": (60, 60)},
                "minimap": {"pos": (824, 20), "size": (180, 180)},
                "chat_window": {"pos": (20, 568), "size": (400, 150)},
                "target_window": {"pos": (20, 100), "size": (200, 100)},
                "system_menu": {"pos": (20, 708), "size": (60, 60)}
            }
        }
        
        return gui_elements
    
    def extract_biome_locations(self) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö –±–∏–æ–º–æ–≤"""
        print("üó∫Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π –±–∏–æ–º–æ–≤...")
        
        biome_locations = {
            "talking_island": {
                "newbie_village": {"coords": (10912, 12784, -2926)},
                "temple_ruins": {"coords": (4560, 8804, -3590)},
                "elven_ruins": {"coords": (48736, 247840, -6240)},
                "orc_barracks": {"coords": (-56682, -113610, -690)},
                "school_of_dark_arts": {"coords": (48144, 247840, -6240)}
            },
            "elven_village": {
                "town_center": {"coords": (46934, 51467, -2977)},
                "elven_temple": {"coords": (47578, 51569, -2977)},
                "magic_shop": {"coords": (47315, 51742, -2977)},
                "weapon_shop": {"coords": (47594, 51781, -2977)},
                "grocery_store": {"coords": (47315, 51360, -2977)}
            },
            "dark_elven_village": {
                "town_center": {"coords": (9745, 15606, -4574)},
                "dark_temple": {"coords": (10322, 14394, -4242)},
                "magic_guild": {"coords": (9674, 15718, -4568)},
                "weapon_shop": {"coords": (9867, 15612, -4568)},
                "armor_shop": {"coords": (9883, 15718, -4568)}
            },
            "orc_village": {
                "town_center": {"coords": (-45186, -112459, -236)},
                "orc_temple": {"coords": (-45563, -112267, -236)},
                "weapon_shop": {"coords": (-45052, -112567, -236)},
                "armor_shop": {"coords": (-45328, -112567, -236)},
                "grocery_store": {"coords": (-45186, -112351, -236)}
            },
            "dwarven_village": {
                "town_center": {"coords": (115113, -178212, -901)},
                "dwarven_temple": {"coords": (115332, -178151, -901)},
                "blacksmith": {"coords": (115013, -178100, -901)},
                "magic_shop": {"coords": (115232, -178100, -901)},
                "warehouse": {"coords": (115013, -178324, -901)}
            },
            "gludin_village": {
                "town_center": {"coords": (-80826, 149775, -3043)},
                "temple": {"coords": (-80826, 149406, -3043)},
                "magic_shop": {"coords": (-80930, 149775, -3043)},
                "weapon_shop": {"coords": (-80722, 149775, -3043)},
                "armor_shop": {"coords": (-80826, 149879, -3043)}
            },
            "gludio_castle_town": {
                "town_center": {"coords": (-12694, 122776, -3116)},
                "castle": {"coords": (-12694, 122408, -3116)},
                "temple": {"coords": (-12798, 122776, -3116)},
                "magic_shop": {"coords": (-12590, 122776, -3116)},
                "weapon_shop": {"coords": (-12694, 122880, -3116)}
            },
            "dion_castle_town": {
                "town_center": {"coords": (15670, 142983, -2705)},
                "castle": {"coords": (15670, 142615, -2705)},
                "temple": {"coords": (15566, 142983, -2705)},
                "magic_shop": {"coords": (15774, 142983, -2705)},
                "weapon_shop": {"coords": (15670, 143087, -2705)}
            },
            "giran_castle_town": {
                "town_center": {"coords": (83400, 147943, -3404)},
                "castle": {"coords": (83400, 147575, -3404)},
                "temple": {"coords": (83296, 147943, -3404)},
                "magic_shop": {"coords": (83504, 147943, -3404)},
                "weapon_shop": {"coords": (83400, 148047, -3404)}
            },
            "oren_castle_town": {
                "town_center": {"coords": (82956, 53162, -1495)},
                "castle": {"coords": (82956, 52794, -1495)},
                "temple": {"coords": (82852, 53162, -1495)},
                "magic_shop": {"coords": (83060, 53162, -1495)},
                "weapon_shop": {"coords": (82956, 53266, -1495)}
            },
            "aden_castle_town": {
                "town_center": {"coords": (147450, 26741, -2204)},
                "castle": {"coords": (147450, 26373, -2204)},
                "temple": {"coords": (147346, 26741, -2204)},
                "magic_shop": {"coords": (147554, 26741, -2204)},
                "weapon_shop": {"coords": (147450, 26845, -2204)}
            }
        }
        
        return biome_locations
    
    def capture_reference_screenshots(self):
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        print("üì∏ –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        
        gui_elements = self.extract_gui_elements_from_reference()
        biome_locations = self.extract_biome_locations()
        
        reference_data = {
            "gui_screenshots": {},
            "biome_screenshots": {},
            "capture_timestamp": datetime.now().isoformat()
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ GUI
        for screen_name, elements in gui_elements.items():
            screenshot_path = self.reference_screenshots_dir / f"{screen_name}.png"
            reference_data["gui_screenshots"][screen_name] = str(screenshot_path)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
            img = np.zeros((768, 1024, 3), dtype=np.uint8)
            cv2.putText(img, f"Reference {screen_name}", (50, 50), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.imwrite(str(screenshot_path), img)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –±–∏–æ–º–æ–≤
        for biome_name, locations in biome_locations.items():
            biome_dir = self.reference_screenshots_dir / biome_name
            biome_dir.mkdir(exist_ok=True)
            reference_data["biome_screenshots"][biome_name] = {}
            
            for location_name, coords in locations.items():
                screenshot_path = biome_dir / f"{location_name}.png"
                reference_data["biome_screenshots"][biome_name][location_name] = str(screenshot_path)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
                img = np.zeros((768, 1024, 3), dtype=np.uint8)
                cv2.putText(img, f"{biome_name}: {location_name}", (50, 50),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
                cv2.putText(img, f"Coords: {coords['coords']}", (50, 100),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (200, 200, 200), 1)
                cv2.imwrite(str(screenshot_path), img)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(self.reference_screenshots_dir / "reference_data.json", 'w', encoding='utf-8') as f:
            json.dump(reference_data, f, ensure_ascii=False, indent=2)
        
        return reference_data
    
    def capture_modern_client_screenshots(self):
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        print("üì∏ –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, –Ω–æ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
        modern_data = {
            "gui_screenshots": {},
            "biome_screenshots": {},
            "capture_timestamp": datetime.now().isoformat()
        }
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        
        return modern_data
    
    def compare_screenshots_pixel_by_pixel(self, ref_path: str, modern_path: str) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–ø–∏–∫—Å–µ–ª—å–Ω–æ"""
        
        if not Path(ref_path).exists() or not Path(modern_path).exists():
            return {
                "error": "–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "compliance_score": 0.0
            }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ref_img = cv2.imread(ref_path)
        modern_img = cv2.imread(modern_path)
        
        if ref_img is None or modern_img is None:
            return {
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "compliance_score": 0.0
            }
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if ref_img.shape != modern_img.shape:
            modern_img = cv2.resize(modern_img, (ref_img.shape[1], ref_img.shape[0]))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
        diff = cv2.absdiff(ref_img, modern_img)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        diff_gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∏–π
        total_pixels = diff_gray.shape[0] * diff_gray.shape[1]
        different_pixels = np.count_nonzero(diff_gray > 10)  # –ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        similarity_percentage = ((total_pixels - different_pixels) / total_pixels) * 100
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑–ª–∏—á–∏–π
        diff_map = np.zeros_like(ref_img)
        diff_map[diff_gray > 10] = [0, 0, 255]  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–∏–π
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        comparison_img = np.hstack([ref_img, modern_img, diff_map])
        
        return {
            "compliance_score": similarity_percentage,
            "total_pixels": total_pixels,
            "different_pixels": different_pixels,
            "similarity_percentage": similarity_percentage,
            "diff_image_path": None,  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ä–∞–∑–ª–∏—á–∏–π
            "comparison_image": comparison_img
        }
    
    def run_gui_compliance_tests(self) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GUI"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GUI...")
        
        test_results = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        reference_data_path = self.reference_screenshots_dir / "reference_data.json"
        if not reference_data_path.exists():
            reference_data = self.capture_reference_screenshots()
        else:
            with open(reference_data_path, 'r', encoding='utf-8') as f:
                reference_data = json.load(f)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GUI —ç–ª–µ–º–µ–Ω—Ç—ã
        for screen_name, ref_screenshot_path in reference_data["gui_screenshots"].items():
            modern_screenshot_path = self.screenshots_dir / f"{screen_name}.png"
            
            if modern_screenshot_path.exists():
                comparison_result = self.compare_screenshots_pixel_by_pixel(
                    ref_screenshot_path, str(modern_screenshot_path)
                )
                
                test_result = {
                    "test_name": f"GUI_{screen_name}_compliance",
                    "test_type": "gui_comparison",
                    "screen_name": screen_name,
                    "reference_path": ref_screenshot_path,
                    "modern_path": str(modern_screenshot_path),
                    "compliance_score": comparison_result.get("compliance_score", 0.0),
                    "status": "PASS" if comparison_result.get("compliance_score", 0) > 90 else "FAIL",
                    "details": comparison_result
                }
                
                test_results.append(test_result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if "comparison_image" in comparison_result:
                    comparison_path = self.comparison_results_dir / f"{screen_name}_comparison.png"
                    cv2.imwrite(str(comparison_path), comparison_result["comparison_image"])
                    test_result["comparison_image_path"] = str(comparison_path)
        
        return test_results
    
    def run_biome_compliance_tests(self) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∏–æ–º–æ–≤"""
        print("üåç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–∏–æ–º–æ–≤...")
        
        test_results = []
        biome_locations = self.extract_biome_locations()
        
        for biome_name, locations in biome_locations.items():
            for location_name, coords in locations.items():
                ref_screenshot_path = self.reference_screenshots_dir / biome_name / f"{location_name}.png"
                modern_screenshot_path = self.screenshots_dir / biome_name / f"{location_name}.png"
                
                if ref_screenshot_path.exists() and modern_screenshot_path.exists():
                    comparison_result = self.compare_screenshots_pixel_by_pixel(
                        str(ref_screenshot_path), str(modern_screenshot_path)
                    )
                    
                    test_result = {
                        "test_name": f"BIOME_{biome_name}_{location_name}_compliance",
                        "test_type": "biome_comparison",
                        "biome_name": biome_name,
                        "location_name": location_name,
                        "coordinates": coords["coords"],
                        "reference_path": str(ref_screenshot_path),
                        "modern_path": str(modern_screenshot_path),
                        "compliance_score": comparison_result.get("compliance_score", 0.0),
                        "status": "PASS" if comparison_result.get("compliance_score", 0) > 85 else "FAIL",
                        "details": comparison_result
                    }
                    
                    test_results.append(test_result)
        
        return test_results
    
    def generate_compliance_report(self, gui_results: List[Dict], biome_results: List[Dict]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏...")
        
        all_results = gui_results + biome_results
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(all_results)
        passed_tests = len([r for r in all_results if r["status"] == "PASS"])
        failed_tests = total_tests - passed_tests
        
        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if total_tests > 0:
            avg_compliance = sum(r["compliance_score"] for r in all_results) / total_tests
        else:
            avg_compliance = 0.0
        
        # GUI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gui_total = len(gui_results)
        gui_passed = len([r for r in gui_results if r["status"] == "PASS"])
        gui_avg_compliance = sum(r["compliance_score"] for r in gui_results) / gui_total if gui_total > 0 else 0.0
        
        # –ë–∏–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        biome_total = len(biome_results)
        biome_passed = len([r for r in biome_results if r["status"] == "PASS"])
        biome_avg_compliance = sum(r["compliance_score"] for r in biome_results) / biome_total if biome_total > 0 else 0.0
        
        report = {
            "report_timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "success_rate": (passed_tests / total_tests * 100) if total_tests > 0 else 0.0,
                "average_compliance_score": avg_compliance
            },
            "gui_compliance": {
                "total_gui_tests": gui_total,
                "passed_gui_tests": gui_passed,
                "gui_success_rate": (gui_passed / gui_total * 100) if gui_total > 0 else 0.0,
                "average_gui_compliance": gui_avg_compliance,
                "detailed_results": gui_results
            },
            "biome_compliance": {
                "total_biome_tests": biome_total,
                "passed_biome_tests": biome_passed,
                "biome_success_rate": (biome_passed / biome_total * 100) if biome_total > 0 else 0.0,
                "average_biome_compliance": biome_avg_compliance,
                "detailed_results": biome_results
            },
            "recommendations": self.generate_recommendations(all_results)
        }
        
        return report
    
    def generate_recommendations(self, test_results: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        recommendations = []
        
        failed_tests = [r for r in test_results if r["status"] == "FAIL"]
        
        if not failed_tests:
            recommendations.append("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–ª–∏–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É.")
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –Ω–µ—É–¥–∞—á
            gui_failures = [r for r in failed_tests if r["test_type"] == "gui_comparison"]
            biome_failures = [r for r in failed_tests if r["test_type"] == "biome_comparison"]
            
            if gui_failures:
                recommendations.append(f"üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(gui_failures)} GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                for failure in gui_failures[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    score = failure.get("compliance_score", 0)
                    recommendations.append(f"   - {failure['screen_name']}: {score:.1f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
            
            if biome_failures:
                recommendations.append(f"üåç –ò—Å–ø—Ä–∞–≤–∏—Ç—å {len(biome_failures)} –ª–æ–∫–∞—Ü–∏–π –±–∏–æ–º–æ–≤:")
                for failure in biome_failures[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    score = failure.get("compliance_score", 0)
                    recommendations.append(f"   - {failure['biome_name']}/{failure['location_name']}: {score:.1f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            low_scores = [r for r in failed_tests if r.get("compliance_score", 0) < 50]
            if low_scores:
                recommendations.append("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            medium_scores = [r for r in failed_tests if 50 <= r.get("compliance_score", 0) < 90]
            if medium_scores:
                recommendations.append("üîß –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
        
        return recommendations
    
    def save_compliance_report(self, report: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = self.comparison_results_dir / f"compliance_report_{timestamp}.json"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return str(report_path)
    
    def run_full_compliance_check(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GUI –∏ –±–∏–æ–º–æ–≤...")
        
        start_time = time.time()
        
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        self.capture_reference_screenshots()
        
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        self.capture_modern_client_screenshots()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã GUI
        gui_results = self.run_gui_compliance_tests()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–∏–æ–º–æ–≤
        biome_results = self.run_biome_compliance_tests()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_compliance_report(gui_results, biome_results)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        report["execution_time"] = execution_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = self.save_compliance_report(report)
        report["report_path"] = report_path
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GUI –∫–ª–∏–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    compliance_system = GUIComplianceSystem("/home/ni/Projects/la2bots")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    report = compliance_system.run_full_compliance_check()
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
    print("-" * 40)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['summary']['total_tests']}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {report['summary']['passed_tests']}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {report['summary']['failed_tests']}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']:.1f}%")
    print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {report['summary']['average_compliance_score']:.1f}%")
    
    print(f"\nGUI —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {report['gui_compliance']['gui_success_rate']:.1f}%")
    print(f"–ë–∏–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {report['biome_compliance']['biome_success_rate']:.1f}%")
    
    print(f"\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['execution_time']:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report['report_path']}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for recommendation in report['recommendations']:
        print(f"  {recommendation}")

if __name__ == "__main__":
    main()
