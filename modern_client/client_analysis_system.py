#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Lineage II –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è GUI
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import sys
import json
import subprocess
import hashlib
from pathlib import Path
from typing import Dict, List, Any, Optional
import re

class ClientAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ Lineage II"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.clients = {
            'original': self.project_root / 'client',
            'nogg_backup': self.project_root / 'client_nogg_backup', 
            'deobfuscated': self.project_root / 'client_deobfuscation',
            'modern': self.project_root / 'modern_client'
        }
        self.analysis_results = {}
        
    def analyze_all_clients(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Lineage II...")
        
        for client_name, client_path in self.clients.items():
            print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")
            self.analysis_results[client_name] = self.analyze_client(client_path, client_name)
            
        return self.analysis_results
    
    def analyze_client(self, client_path: Path, client_name: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"""
        if not client_path.exists():
            return {"error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
        analysis = {
            "name": client_name,
            "path": str(client_path),
            "size": self.get_directory_size(client_path),
            "files": self.analyze_files(client_path),
            "executables": self.find_executables(client_path),
            "resources": self.analyze_resources(client_path),
            "gui_elements": self.analyze_gui_elements(client_path),
            "textures": self.analyze_textures(client_path),
            "sounds": self.analyze_sounds(client_path),
            "maps": self.analyze_maps(client_path)
        }
        
        return analysis
    
    def get_directory_size(self, path: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            result = subprocess.run(['du', '-sh', str(path)], 
                                  capture_output=True, text=True)
            return result.stdout.split()[0]
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def analyze_files(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        files_info = {
            "total_files": 0,
            "file_types": {},
            "largest_files": [],
            "executable_files": []
        }
        
        for file_path in path.rglob('*'):
            if file_path.is_file():
                files_info["total_files"] += 1
                
                # –¢–∏–ø —Ñ–∞–π–ª–∞
                ext = file_path.suffix.lower()
                files_info["file_types"][ext] = files_info["file_types"].get(ext, 0) + 1
                
                # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    size = file_path.stat().st_size
                    files_info["largest_files"].append((str(file_path), size))
                except:
                    pass
                
                # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
                if file_path.suffix.lower() in ['.exe', '.dll', '.so', '.bin']:
                    files_info["executable_files"].append(str(file_path))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        files_info["largest_files"].sort(key=lambda x: x[1], reverse=True)
        files_info["largest_files"] = files_info["largest_files"][:10]
        
        return files_info
    
    def find_executables(self, path: Path) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã"""
        executables = []
        
        for file_path in path.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() == '.exe':
                try:
                    # –ê–Ω–∞–ª–∏–∑ PE —Ñ–∞–π–ª–∞
                    result = subprocess.run(['file', str(file_path)], 
                                          capture_output=True, text=True)
                    file_info = result.stdout.strip()
                    
                    executables.append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": file_info,
                        "is_main_client": file_path.name.lower() == 'lineageii.exe'
                    })
                except:
                    pass
                    
        return executables
    
    def analyze_resources(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        resources = {
            "textures": [],
            "sounds": [],
            "animations": [],
            "maps": [],
            "models": []
        }
        
        # –¢–µ–∫—Å—Ç—É—Ä—ã
        for ext in ['.utx', '.dds', '.tga', '.bmp', '.jpg', '.png']:
            for file_path in path.rglob(f'*{ext}'):
                if file_path.is_file():
                    resources["textures"].append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": ext
                    })
        
        # –ó–≤—É–∫–∏
        for ext in ['.uax', '.ogg', '.wav', '.mp3']:
            for file_path in path.rglob(f'*{ext}'):
                if file_path.is_file():
                    resources["sounds"].append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": ext
                    })
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏
        for ext in ['.ukx', '.usk']:
            for file_path in path.rglob(f'*{ext}'):
                if file_path.is_file():
                    resources["animations"].append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": ext
                    })
        
        # –ö–∞—Ä—Ç—ã
        for ext in ['.unr', '.umx']:
            for file_path in path.rglob(f'*{ext}'):
                if file_path.is_file():
                    resources["maps"].append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": ext
                    })
        
        # –ú–æ–¥–µ–ª–∏
        for ext in ['.usx', '.3ds', '.obj']:
            for file_path in path.rglob(f'*{ext}'):
                if file_path.is_file():
                    resources["models"].append({
                        "name": file_path.name,
                        "path": str(file_path),
                        "size": file_path.stat().st_size,
                        "type": ext
                    })
        
        return resources
    
    def analyze_gui_elements(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã GUI"""
        gui_elements = {
            "interface_files": [],
            "text_files": [],
            "config_files": [],
            "ui_textures": []
        }
        
        # –§–∞–π–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        for file_path in path.rglob('*'):
            if file_path.is_file():
                name = file_path.name.lower()
                
                # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Ñ–∞–π–ª—ã
                if any(keyword in name for keyword in ['interface', 'ui', 'gui', 'menu', 'dialog']):
                    gui_elements["interface_files"].append(str(file_path))
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                if file_path.suffix.lower() in ['.txt', '.l2text', '.string']:
                    gui_elements["text_files"].append(str(file_path))
                
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if file_path.suffix.lower() in ['.ini', '.cfg', '.conf']:
                    gui_elements["config_files"].append(str(file_path))
                
                # UI —Ç–µ–∫—Å—Ç—É—Ä—ã
                if any(keyword in name for keyword in ['ui_', 'interface_', 'menu_', 'button_', 'icon_']):
                    gui_elements["ui_textures"].append(str(file_path))
        
        return gui_elements
    
    def analyze_textures(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        texture_analysis = {
            "terrain_textures": [],
            "character_textures": [],
            "ui_textures": [],
            "effect_textures": [],
            "building_textures": []
        }
        
        for file_path in path.rglob('*.utx'):
            if file_path.is_file():
                name = file_path.name.lower()
                
                # –¢–µ–∫—Å—Ç—É—Ä—ã —Ä–µ–ª—å–µ—Ñ–∞
                if any(keyword in name for keyword in ['terrain', 'ground', 'grass', 'stone', 'sand', 'snow']):
                    texture_analysis["terrain_textures"].append(str(file_path))
                
                # –¢–µ–∫—Å—Ç—É—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                elif any(keyword in name for keyword in ['char', 'human', 'elf', 'dwarf', 'orc', 'darkelf']):
                    texture_analysis["character_textures"].append(str(file_path))
                
                # UI —Ç–µ–∫—Å—Ç—É—Ä—ã
                elif any(keyword in name for keyword in ['ui', 'interface', 'menu', 'button', 'icon']):
                    texture_analysis["ui_textures"].append(str(file_path))
                
                # –≠—Ñ—Ñ–µ–∫—Ç—ã
                elif any(keyword in name for keyword in ['effect', 'particle', 'magic', 'spell']):
                    texture_analysis["effect_textures"].append(str(file_path))
                
                # –ó–¥–∞–Ω–∏—è
                elif any(keyword in name for keyword in ['building', 'castle', 'house', 'tower', 'wall']):
                    texture_analysis["building_textures"].append(str(file_path))
        
        return texture_analysis
    
    def analyze_sounds(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–≤—É–∫–∏"""
        sound_analysis = {
            "music": [],
            "effects": [],
            "voice": [],
            "ambient": []
        }
        
        for file_path in path.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in ['.uax', '.ogg', '.wav']:
                name = file_path.name.lower()
                
                if 'music' in name or 'bgm' in name:
                    sound_analysis["music"].append(str(file_path))
                elif 'effect' in name or 'sfx' in name:
                    sound_analysis["effects"].append(str(file_path))
                elif 'voice' in name or 'speech' in name:
                    sound_analysis["voice"].append(str(file_path))
                elif 'ambient' in name or 'env' in name:
                    sound_analysis["ambient"].append(str(file_path))
        
        return sound_analysis
    
    def analyze_maps(self, path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—ã"""
        map_analysis = {
            "world_maps": [],
            "dungeon_maps": [],
            "city_maps": [],
            "pvp_maps": []
        }
        
        for file_path in path.rglob('*.unr'):
            if file_path.is_file():
                name = file_path.name.lower()
                
                if any(keyword in name for keyword in ['world', 'field', 'outdoor']):
                    map_analysis["world_maps"].append(str(file_path))
                elif any(keyword in name for keyword in ['dungeon', 'cave', 'underground']):
                    map_analysis["dungeon_maps"].append(str(file_path))
                elif any(keyword in name for keyword in ['city', 'town', 'village']):
                    map_analysis["city_maps"].append(str(file_path))
                elif any(keyword in name for keyword in ['pvp', 'battle', 'arena']):
                    map_analysis["pvp_maps"].append(str(file_path))
        
        return map_analysis
    
    def generate_gui_prediction(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ GUI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ GUI...")
        
        # –ë–µ—Ä–µ–º –∑–∞ –æ—Å–Ω–æ–≤—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        original = self.analysis_results.get('original', {})
        deobfuscated = self.analysis_results.get('deobfuscated', {})
        
        gui_prediction = {
            "expected_interface": {
                "login_screen": self.predict_login_screen(original, deobfuscated),
                "character_selection": self.predict_character_selection(original, deobfuscated),
                "character_creation": self.predict_character_creation(original, deobfuscated),
                "game_interface": self.predict_game_interface(original, deobfuscated),
                "inventory": self.predict_inventory(original, deobfuscated),
                "skills": self.predict_skills(original, deobfuscated),
                "chat": self.predict_chat(original, deobfuscated),
                "minimap": self.predict_minimap(original, deobfuscated)
            },
            "visual_style": self.predict_visual_style(original, deobfuscated),
            "audio_style": self.predict_audio_style(original, deobfuscated),
            "recommendations": self.generate_recommendations()
        }
        
        return gui_prediction
    
    def predict_login_screen(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞"""
        return {
            "elements": [
                "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞",
                "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è", 
                "–ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏'",
                "–ö–Ω–æ–ø–∫–∞ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'",
                "–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'",
                "–õ–æ–≥–æ—Ç–∏–ø –∏–≥—Ä—ã",
                "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            ],
            "layout": "–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º",
            "colors": "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
            "fonts": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–≥—Ä—ã"
        }
    
    def predict_character_selection(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        return {
            "elements": [
                "–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
                "3D –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ (—É—Ä–æ–≤–µ–Ω—å, –∫–ª–∞—Å—Å)",
                "–ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É'",
                "–ö–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'",
                "–ö–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'"
            ],
            "layout": "–°–ø–∏—Å–æ–∫ —Å–ª–µ–≤–∞, –º–æ–¥–µ–ª—å —Å–ø—Ä–∞–≤–∞",
            "colors": "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å —Å–∏–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
            "3d_models": "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ 3D –º–æ–¥–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
        }
    
    def predict_character_creation(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        return {
            "elements": [
                "–í—ã–±–æ—Ä —Ä–∞—Å—ã (–ß–µ–ª–æ–≤–µ–∫, –≠–ª—å—Ñ, –¢–µ–º–Ω—ã–π –≠–ª—å—Ñ, –û—Ä–∫, –î–≤–æ—Ä—Ñ)",
                "–í—ã–±–æ—Ä –ø–æ–ª–∞",
                "–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
                "–í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "3D –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
                "–ö–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å'",
                "–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞'"
            ],
            "layout": "–ü–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ–∫—Ä—É–≥ 3D –º–æ–¥–µ–ª–∏",
            "customization": [
                "–¶–≤–µ—Ç –≤–æ–ª–æ—Å",
                "–ü—Ä–∏—á–µ—Å–∫–∞", 
                "–¶–≤–µ—Ç –≥–ª–∞–∑",
                "–†–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏ (–¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)",
                "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ—Å—Ç—å",
                "–í—ã—Å–æ—Ç–∞"
            ]
        }
    
    def predict_game_interface(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        return {
            "main_elements": [
                "–ü–∞–Ω–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è (HP bar)",
                "–ü–∞–Ω–µ–ª—å –º–∞–Ω—ã (MP bar)", 
                "–ü–∞–Ω–µ–ª—å –æ–ø—ã—Ç–∞ (EXP bar)",
                "–ü–∞–Ω–µ–ª—å —Å–∫–∏–ª–æ–≤",
                "–ü–∞–Ω–µ–ª—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
                "–ú–∏–Ω–∏–∫–∞—Ä—Ç–∞",
                "–ß–∞—Ç",
                "–ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                "–ú–µ–Ω—é –∏–≥—Ä—ã"
            ],
            "layout": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π MMORPG –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "positioning": {
                "hp_mp": "–í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª",
                "skills": "–ù–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä",
                "inventory": "–ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª", 
                "minimap": "–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª",
                "chat": "–ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª"
            }
        }
    
    def predict_inventory(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        return {
            "elements": [
                "–°–µ—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏",
                "–ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
                "–ö–Ω–æ–ø–∫–∞ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'",
                "–ö–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–æ—Å–∏—Ç—å'",
                "–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–∞—Ç—å'"
            ],
            "layout": "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–µ—Ç–∫–æ–π",
            "grid_size": "8x6 —Å–ª–æ—Ç–æ–≤",
            "item_display": "–ò–∫–æ–Ω–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ä–∞–º–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"
        }
    
    def predict_skills(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∫–∏–ª–æ–≤"""
        return {
            "elements": [
                "–î–µ—Ä–µ–≤–æ —Å–∫–∏–ª–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º",
                "–ò–∫–æ–Ω–∫–∏ —Å–∫–∏–ª–æ–≤",
                "–û–ø–∏—Å–∞–Ω–∏—è —Å–∫–∏–ª–æ–≤",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
                "–ö–Ω–æ–ø–∫–∞ '–ò–∑—É—á–∏—Ç—å'",
                "–ö–Ω–æ–ø–∫–∞ '–ó–∞–±—ã—Ç—å'"
            ],
            "layout": "–î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "skill_categories": [
                "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã",
                "–ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã", 
                "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–∫–∏–ª–ª—ã",
                "–ë–æ–µ–≤—ã–µ —Å–∫–∏–ª–ª—ã"
            ]
        }
    
    def predict_chat(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
        return {
            "elements": [
                "–û–∫–Ω–æ —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "–ö–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ (–û–±—â–∏–π, –¢–æ—Ä–≥–æ–≤–ª—è, –ö–ª–∞–Ω, –õ–∏—á–Ω—ã–µ)",
                "–ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"
            ],
            "channels": [
                "–û–±—â–∏–π —á–∞—Ç",
                "–¢–æ—Ä–≥–æ–≤–ª—è",
                "–ö–ª–∞–Ω",
                "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            ],
            "features": [
                "–¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤",
                "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"
            ]
        }
    
    def predict_minimap(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –º–∏–Ω–∏–∫–∞—Ä—Ç—É"""
        return {
            "elements": [
                "–ú–∏–Ω–∏–∞—Ç—é—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±–ª–∞—Å—Ç–∏",
                "–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞",
                "–ü–æ–∑–∏—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤",
                "–ü–æ–∑–∏—Ü–∏–∏ NPC",
                "–ü–æ–∑–∏—Ü–∏–∏ –º–æ–±–æ–≤",
                "–ö–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ö–Ω–æ–ø–∫–∞ '–û—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç—É'"
            ],
            "features": [
                "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–§–∏–ª—å—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "–ú–∞—Ä–∫–µ—Ä—ã —Ü–µ–ª–µ–π",
                "–ü—É—Ç–µ–≤—ã–µ —Ç–æ—á–∫–∏"
            ]
        }
    
    def predict_visual_style(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å"""
        return {
            "theme": "–§—ç–Ω—Ç–µ–∑–∏ MMORPG",
            "color_scheme": {
                "primary": "–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π",
                "secondary": "–ó–æ–ª–æ—Ç–æ–π", 
                "accent": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π",
                "background": "–¢–µ–º–Ω—ã–π",
                "text": "–°–≤–µ—Ç–ª—ã–π"
            },
            "art_style": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ñ—ç–Ω—Ç–µ–∑–∏",
            "ui_style": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π MMORPG –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "textures": {
                "terrain": "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∑–µ–º–ª–∏, —Ç—Ä–∞–≤—ã, –∫–∞–º–Ω—è",
                "characters": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
                "buildings": "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è –∏ –∑–∞–º–∫–∏",
                "effects": "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —á–∞—Å—Ç–∏—Ü—ã"
            }
        }
    
    def predict_audio_style(self, original: Dict, deobfuscated: Dict) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å—Ç–∏–ª—å"""
        return {
            "music": {
                "style": "–≠–ø–∏—á–µ—Å–∫–∞—è –æ—Ä–∫–µ—Å—Ç—Ä–æ–≤–∞—è –º—É–∑—ã–∫–∞",
                "themes": [
                    "–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞",
                    "–ú—É–∑—ã–∫–∞ –≥–æ—Ä–æ–¥–æ–≤",
                    "–ú—É–∑—ã–∫–∞ –ø–æ–¥–∑–µ–º–µ–ª–∏–π",
                    "–ë–æ–µ–≤–∞—è –º—É–∑—ã–∫–∞",
                    "–ú—É–∑—ã–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
                ]
            },
            "effects": {
                "combat": "–ó–≤—É–∫–∏ —É–¥–∞—Ä–æ–≤, –º–∞–≥–∏–∏, –∫—Ä–∏–∫–∏",
                "environment": "–ó–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã, –≤–µ—Ç—Ä–∞, –≤–æ–¥—ã",
                "ui": "–ó–≤—É–∫–∏ –∫–ª–∏–∫–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "movement": "–ó–≤—É–∫–∏ —à–∞–≥–æ–≤, –±–µ–≥–∞, –ø—Ä—ã–∂–∫–æ–≤"
            },
            "voice": {
                "npc": "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Ä–µ–ø–ª–∏–∫–∏ NPC",
                "player": "–ó–≤—É–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "system": "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            }
        }
    
    def generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        return [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è GUI",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ MMORPG",
            "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (–ª—É—á—à–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, –∑–≤—É–∫)",
            "–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
            "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞"
        ]
    
    def save_analysis(self, output_file: str = "client_analysis.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        output_path = self.project_root / "modern_client" / output_file
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(self.analysis_results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
    
    def save_gui_prediction(self, output_file: str = "gui_prediction.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ GUI"""
        gui_prediction = self.generate_gui_prediction()
        output_path = self.project_root / "modern_client" / output_file
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(gui_prediction, f, ensure_ascii=False, indent=2)
        
        print(f"\nüé® –ü—Ä–æ–≥–Ω–æ–∑ GUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Lineage II")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ClientAnalyzer("/home/ni/Projects/la2bots")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
    results = analyzer.analyze_all_clients()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyzer.save_analysis()
    analyzer.save_gui_prediction()
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print("\nüìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:")
    print("-" * 30)
    
    for client_name, analysis in results.items():
        if "error" not in analysis:
            print(f"\n{client_name.upper()}:")
            print(f"  –†–∞–∑–º–µ—Ä: {analysis['size']}")
            print(f"  –§–∞–π–ª–æ–≤: {analysis['files']['total_files']}")
            print(f"  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö: {len(analysis['executables'])}")
            print(f"  –¢–µ–∫—Å—Ç—É—Ä: {len(analysis['resources']['textures'])}")
            print(f"  –ó–≤—É–∫–æ–≤: {len(analysis['resources']['sounds'])}")
            print(f"  –ö–∞—Ä—Ç: {len(analysis['resources']['maps'])}")
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ modern_client/")

if __name__ == "__main__":
    main()
